[{"/Users/cooperterrones/turing/module3/projects/iVolunteer/src/index.js":"1","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/App/index.js":"2","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/apiCalls.js":"3","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/Postings/index.js":"4","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/User/index.js":"5","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/PostingView/index.js":"6","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/PostingCard/index.js":"7","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/Navigation/index.js":"8"},{"size":274,"mtime":1609903842735,"results":"9","hashOfConfig":"10"},{"size":2291,"mtime":1610223381413,"results":"11","hashOfConfig":"10"},{"size":1319,"mtime":1610385266195,"results":"12","hashOfConfig":"10"},{"size":1373,"mtime":1610385967415,"results":"13","hashOfConfig":"10"},{"size":3692,"mtime":1610385300514,"results":"14","hashOfConfig":"10"},{"size":5263,"mtime":1610385266188,"results":"15","hashOfConfig":"10"},{"size":1306,"mtime":1610385266186,"results":"16","hashOfConfig":"10"},{"size":2217,"mtime":1610385266185,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"axssjc",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/cooperterrones/turing/module3/projects/iVolunteer/src/index.js",[],["37","38"],"/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/App/index.js",[],"/Users/cooperterrones/turing/module3/projects/iVolunteer/src/apiCalls.js",[],"/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/Postings/index.js",["39"],"/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/User/index.js",["40","41"],"import React, { useState } from \"react\";\nimport { Link, render } from \"react-router-dom\";\nimport \"./User.scss\";\nimport starImage from \"../../Assets/star.png\";\nimport userToggleButtonRight from \"../../Assets/right-chevron.png\";\nimport userToggleButtonLeft from \"../../Assets/left-chevron.png\";\n\nconst User = ({ info }) => {\n  const { id, name, profilePicture, volunteeredHours, upcomingJobs } = info;\n\n  const [userOpen, setUserOpen] = useState(true);\n\n  let userSidebarClass = userOpen ? \"user-open\" : \"user-closed\";\n  let userButtonClass = userOpen ? userToggleButtonLeft : userToggleButtonRight;\n  let userToggleButtonClass = userOpen\n    ? \"user-toggle-button-open\"\n    : \"user-toggle-button-closed\";\n  let userTransitionClass = userOpen\n    ? \"user-open-transition\"\n    : \"user-close-transition\";\n\n  return (\n    <div className=\"components-wrapper\">\n      <section className={userSidebarClass} id={id}>\n        <section\n          className={`user-profile-heading-wrapper ${userTransitionClass}`}\n        >\n          <h1 className={`user-profile-heading ${userTransitionClass}`}>\n            User Profile\n          </h1>\n        </section>\n        <div\n          className={`profile-picture ${userTransitionClass}`}\n          style={{\n            backgroundImage: `url(${profilePicture})`,\n            backgroundPosition: \"center\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-reapeat\",\n          }}\n        ></div>\n        <h3 className={`username ${userTransitionClass}`}>{name}</h3>\n        <div className={`rating-wrapper ${userTransitionClass}`}>\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n        </div>\n        <div className={`section-titles ${userTransitionClass}`}>\n          <p className={`sidebar-titles ${userTransitionClass}`}>\n            Total Hours Volunteered\n          </p>\n          <hr className={`section-line ${userTransitionClass}`} />\n        </div>\n        <div className={`hours-bar ${userTransitionClass}`}>\n          <p>{volunteeredHours} Hours</p>\n        </div>\n        <div className={`section-titles ${userTransitionClass}`}>\n          <p className=\"sidebar-titles\">My Upcoming Jobs</p>\n          <hr className={`section-line ${userTransitionClass}`} />\n        </div>\n        <div className={`upcoming-job-cards-wrapper ${userTransitionClass}`}>\n          {upcomingJobs.map((job) => {\n            return (\n              <Link\n                to={`/postings/${job.eventId}`}\n                className={`upcoming-job-link-wrapper ${userTransitionClass}`}\n              >\n                <section key={job.id} className=\"upcoming-job-card\">\n                  <div className=\"event-info-wrapper\">\n                    <h3 className=\"job-event-main-detail\">\n                      {job.positionName}\n                    </h3>\n                    <h3 className=\"job-event-main-detail\">{job.date}</h3>\n                  </div>\n                  <h4 className=\"job-event-name\">{job.eventName}</h4>\n                </section>\n              </Link>\n            );\n          })}\n        </div>\n      </section>\n      <button className={userToggleButtonClass}>\n        <img\n          className=\"glyph-icon-sidebar\"\n          src={userButtonClass}\n          onClick={() => setUserOpen(!userOpen)}\n        />\n      </button>\n      <div className=\"user-background-transition\"></div>\n    </div>\n  );\n};\n\nexport default User;\n","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/PostingView/index.js",["42","43"],"import React, { useState, useEffect } from \"react\";\nimport { apiCalls } from \"../../apiCalls\";\nimport \"./PostingView.scss\";\nimport backButton from \"../../Assets/back-button.png\";\nimport { Link } from \"react-router-dom\";\n\nconst PostingView = ({ match, getUserInfo }) => {\n  const eventId = match.params.id;\n  const [chosenPosting, setChosenPosting] = useState(null);\n  const [chosenJob, setChosenJob] = useState(null);\n  const [signedUpJobName, setSignedUpJobName] = useState('');\n  const [userInfo, setUserInfo] = useState(null);\n  \n  const getDetails = () => {\n    Promise.all([apiCalls.getUser(), apiCalls.getSinglePosting(eventId)]).then(\n      (data) => {\n        setUserInfo(data[0]);\n        setChosenPosting(data[1]);\n        const signedUpEvent = data[0].upcomingJobs.find(\n          (job) => job.eventName === data[1].name\n        );\n        if (signedUpEvent) {\n          setSignedUpJobName(signedUpEvent.positionName);\n        }\n      }\n    );\n  };\n\n  const substractOpenPosition = () => {\n    apiCalls.patchEventPosting(eventId, { jobId: chosenJob.id }).then(() => {\n      postPositionToUser();\n      setSignedUpJobName(true);\n    });\n  };\n\n  const postPositionToUser = () => {\n    const newUpcomingJob = {\n      id: `1-${chosenJob.id}`,\n      eventId,\n      eventName: chosenPosting.name,\n      positionName: chosenJob.name,\n      date: chosenPosting.date,\n    };\n    apiCalls.postJobPosting(newUpcomingJob).then(() => {\n      getUserInfo();\n    });\n  };\n\n  useEffect(() => getDetails(), [userInfo]);\n\n  if (chosenPosting) {\n    const {\n      date,\n      name,\n      organization,\n      location,\n      description,\n      duration,\n      category,\n      openJobs,\n    } = chosenPosting;\n\n    const reformedDate = new Date(date)\n      .toDateString()\n      .split(\" \")\n      .slice(1)\n      .join(\" \");\n\n    return (\n      <section className=\"postings-container\">\n        <div className=\"postings-title-wrapper\">\n          <h1 className=\"postings-title\">Event Details</h1>\n        </div>\n        <div className=\"back-button-wrap\">\n          <Link to=\"/\">\n            <img src={backButton} className=\"back-button-img\" />\n          </Link>\n        </div>\n        <div className=\"posting-info-wrapper\">\n          <div className=\"posting-left-info-wrapper\">\n            <h3 className=\"event-title\">{name}</h3>\n            <div className=\"section-titles\">\n              <strong>\n                <p className=\"posting-info-title\">Description</p>\n              </strong>\n              <hr className=\"section-line\" />\n            </div>\n            <p className=\"event-description\">{description}</p>\n            <div className=\"section-titles\">\n              <strong>\n                <p className=\"posting-info-title\">Open Positions</p>\n              </strong>\n              <hr className=\"section-line\" />\n            </div>\n            <div className=\"posting-position-cards-wrapper\">\n              {openJobs.map((job) => (\n                <button\n                  onClick={() => setChosenJob(job)}\n                  key={job.id}\n                  className=\"posting-positions-card\"\n                  style={{\n                            backgroundColor: signedUpJobName === job.name ? '#2ec4b6': \"#initial\",\n                            color: signedUpJobName === job.name ? 'white': \"#initial\",\n                            borderColor: signedUpJobName === job.name ? '#2ec4b6': \"#initial\"\n                          }}\n                >\n                  <h3 className=\"event-job-name\" >{job.name}</h3>\n                  <p className=\"event-job-title\">Open Spots: {job.numberOfSpots}</p>\n                </button>\n              ))}\n            </div>\n            <div className=\"submit-button-wrapper\">\n              <button\n                onClick={substractOpenPosition}\n                disabled={signedUpJobName ? true : false}\n                className=\"submit-button\"\n              >\n                Sign me up!\n              </button>\n            </div>\n          </div>\n          <div className=\"posting-right-info-wrapper\">\n            <h3 className=\"event-title\">{reformedDate}</h3>\n            <div className=\"posting-organization-wrapper\">\n              <strong>\n                <p className=\"posting-info-title\">Organization</p>\n              </strong>\n              <p>{organization}</p>\n            </div>\n            <div className=\"posting-category-wrapper\">\n              <strong>\n                <p className=\"posting-info-title\">Category</p>\n              </strong>\n              <p>{category}</p>\n            </div>\n            <div className=\"posting-location-wrapper\">\n              <strong>\n                <p className=\"posting-info-title\">Location</p>\n              </strong>\n              <p>{location}</p>\n            </div>\n            <div className=\"posting-duration-wrapper\">\n              <strong>\n                <p className=\"posting-info-title\">Duration</p>\n              </strong>\n              <p>{duration}</p>\n            </div>   \n          </div>\n        </div>\n      </section>\n    );\n  }\n  return null;\n};\n\nexport default PostingView;\n","/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/PostingCard/index.js",[],"/Users/cooperterrones/turing/module3/projects/iVolunteer/src/Components/Navigation/index.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":28,"column":36,"nodeType":"50","endLine":28,"endColumn":38,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":16,"nodeType":"54","messageId":"55","endLine":2,"endColumn":22},{"ruleId":"56","severity":1,"message":"57","line":84,"column":9,"nodeType":"58","endLine":88,"endColumn":11},{"ruleId":"48","severity":1,"message":"59","line":49,"column":33,"nodeType":"50","endLine":49,"endColumn":43,"suggestions":"60"},{"ruleId":"56","severity":1,"message":"57","line":76,"column":13,"nodeType":"58","endLine":76,"endColumn":65},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.","ArrayExpression",["63"],"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getDetails'. Either include it or remove the dependency array.",["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [getCategories]",{"range":"69","text":"70"},"Update the dependencies array to be: [getDetails, userInfo]",{"range":"71","text":"72"},[776,778],"[getCategories]",[1501,1511],"[getDetails, userInfo]"]