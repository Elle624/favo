[{"/Users/cooperterrones/turing/module3/projects/favo/src/index.js":"1","/Users/cooperterrones/turing/module3/projects/favo/src/Components/App/index.js":"2","/Users/cooperterrones/turing/module3/projects/favo/src/apiCalls.js":"3","/Users/cooperterrones/turing/module3/projects/favo/src/Components/ErrorPage/index.js":"4","/Users/cooperterrones/turing/module3/projects/favo/src/Components/WelcomePage/index.js":"5","/Users/cooperterrones/turing/module3/projects/favo/src/Components/Loading/index.js":"6","/Users/cooperterrones/turing/module3/projects/favo/src/Components/User/index.js":"7","/Users/cooperterrones/turing/module3/projects/favo/src/Components/Postings/index.js":"8","/Users/cooperterrones/turing/module3/projects/favo/src/Components/PostingView/index.js":"9","/Users/cooperterrones/turing/module3/projects/favo/src/Components/PostingCard/index.js":"10","/Users/cooperterrones/turing/module3/projects/favo/src/Components/ProgressRing/index.js":"11","/Users/cooperterrones/turing/module3/projects/favo/src/Components/Navigation/index.js":"12"},{"size":291,"mtime":1610673547552,"results":"13","hashOfConfig":"14"},{"size":2894,"mtime":1611949186323,"results":"15","hashOfConfig":"14"},{"size":1349,"mtime":1611949186328,"results":"16","hashOfConfig":"14"},{"size":434,"mtime":1610497298845,"results":"17","hashOfConfig":"14"},{"size":943,"mtime":1610497298854,"results":"18","hashOfConfig":"14"},{"size":338,"mtime":1610497298846,"results":"19","hashOfConfig":"14"},{"size":3957,"mtime":1611949186328,"results":"20","hashOfConfig":"14"},{"size":1415,"mtime":1611949186326,"results":"21","hashOfConfig":"14"},{"size":5879,"mtime":1611949186325,"results":"22","hashOfConfig":"14"},{"size":1306,"mtime":1610497298848,"results":"23","hashOfConfig":"14"},{"size":1260,"mtime":1611949186326,"results":"24","hashOfConfig":"14"},{"size":2850,"mtime":1611949186324,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"t7k2up",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/cooperterrones/turing/module3/projects/favo/src/index.js",[],["55","56"],"/Users/cooperterrones/turing/module3/projects/favo/src/Components/App/index.js",[],"/Users/cooperterrones/turing/module3/projects/favo/src/apiCalls.js",[],"/Users/cooperterrones/turing/module3/projects/favo/src/Components/ErrorPage/index.js",[],"/Users/cooperterrones/turing/module3/projects/favo/src/Components/WelcomePage/index.js",[],"/Users/cooperterrones/turing/module3/projects/favo/src/Components/Loading/index.js",[],"/Users/cooperterrones/turing/module3/projects/favo/src/Components/User/index.js",["57"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ProgressRing from \"../ProgressRing\";\nimport \"./User.scss\";\nimport starImage from \"../../Assets/star.png\";\nimport userToggleButtonRight from \"../../Assets/right-chevron.png\";\nimport userToggleButtonLeft from \"../../Assets/left-chevron.png\";\n\nconst User = ({ info }) => {\n  const { id, name, profilePicture, volunteeredHours, upcomingJobs, completedJobs } = info;\n  const [userOpen, setUserOpen] = useState(true);\n\n  let userSidebarClass = userOpen ? \"user-open\" : \"user-closed\";\n  let userButtonClass = userOpen ? userToggleButtonLeft : userToggleButtonRight;\n  let userToggleButtonClass = userOpen\n    ? \"user-toggle-button-open\"\n    : \"user-toggle-button-closed\";\n  let userTransitionClass = userOpen\n    ? \"user-open-transition\"\n    : \"user-close-transition\";\n  let componentsWrapperClass = userOpen\n    ? \"components-wrapper-open\"\n    : \"components-wrapper-closed\";\n\n  return (\n    <div data-testid=\"user-sidebar-element\" className={componentsWrapperClass}>\n      <section className={userSidebarClass} id={id}>\n        <section\n          className={`user-profile-heading-wrapper ${userTransitionClass}`}\n        >\n          <h1 className={`user-profile-heading ${userTransitionClass}`}>\n            My Profile\n          </h1>\n        </section>\n        <div\n          className={`profile-picture-wrapper ${userTransitionClass}`}\n        >\n          <img className=\"profile-user-image\" src={profilePicture}/>\n        </div>\n        <h3 className={`username ${userTransitionClass}`}>{name}</h3>\n        <div className={`rating-wrapper ${userTransitionClass}`}>\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n          <img className=\"star-image\" src={starImage} alt=\"star-icon\" />\n        </div>\n        <div className={`section-titles ${userTransitionClass}`}>\n          <p className={`sidebar-titles ${userTransitionClass}`}>\n            Total Hours Volunteered\n          </p>\n          <hr className={`section-line ${userTransitionClass}`} />\n        </div>\n        <div className={userTransitionClass}>\n          <ProgressRing \n            volunteeredHours={volunteeredHours}\n            completedJobs={completedJobs}\n          />\n        </div>\n        <div className={`section-titles ${userTransitionClass}`}>\n          <p className=\"sidebar-titles\">My Upcoming Jobs</p>\n          <hr className={`section-line ${userTransitionClass}`} />\n        </div>\n        <div className={`upcoming-job-cards-wrapper ${userTransitionClass}`}>\n          {upcomingJobs.map((job) => {\n            return (\n              <Link\n                data-testid={`upcoming-${job.id}`}\n                to={`/postings/${job.eventId}`}\n                className={`upcoming-job-link-wrapper ${userTransitionClass}`}\n                key={job.id}\n              >\n                <section key={job.id} className=\"upcoming-job-card\">\n                  <div className=\"event-info-wrapper\">\n                    <h3 className=\"job-event-main-detail\">\n                      {job.positionName}\n                    </h3>\n                    <h3 className=\"job-event-main-detail\">{job.date}</h3>\n                  </div>\n                  <h4 className=\"job-event-name\">{job.eventName}</h4>\n                </section>\n              </Link>\n            );\n          })}\n        </div>\n      </section>\n      <button className={userToggleButtonClass}>\n        <img\n          className=\"glyph-icon-sidebar\"\n          src={userButtonClass}\n          onClick={() => setUserOpen(!userOpen)}\n          alt=\"user-sidebar-button-chevron\"\n        />\n      </button>\n      <div className=\"user-background-transition\"></div>\n    </div>\n  );\n};\n\nexport default User;\n","/Users/cooperterrones/turing/module3/projects/favo/src/Components/Postings/index.js",["58"],"import React, { useState, useEffect } from 'react';\nimport './Postings.scss';\nimport PostingCard from '../PostingCard';\nimport Navigation from '../Navigation';\n\nconst Postings = ({\n  isSorted,\n  postings,\n  searchByKeyWord,\n  filterByCategory,\n  sortPostingsByDate,\n  resetNavigationQueries\n}) => {\n  const [categories, setCategories] = useState([]);\n\n  const getCategories = () => {\n    const categories = postings.reduce((totalCategories, posting) => {\n      if (!totalCategories.includes(posting.category)) {\n        totalCategories.push(posting.category);\n      }\n      return totalCategories.sort();\n    }, []);\n    setCategories(categories);\n  };\n  const postingCards = postings.map((posting) => (\n    <PostingCard posting={posting} key={posting.id} />\n  ));\n\n  useEffect(() => getCategories(), []);\n\n  return (\n    <section data-testid='postings-element' className='postings-container-main'>\n      <div className='postings-title-wrapper'>\n        <h1 className='postings-title'>Open Volunteer Positions</h1>\n      </div>\n      <Navigation\n        isSorted={isSorted}\n        searchByKeyWord={searchByKeyWord}\n        categories={categories}\n        filterByCategory={filterByCategory}\n        sortByDate={sortPostingsByDate}\n        resetNavigationQueries={resetNavigationQueries}\n      />\n      <section className='postings-wrapper'>{postingCards}</section>\n    </section>\n  );\n};\n\nexport default Postings;\n","/Users/cooperterrones/turing/module3/projects/favo/src/Components/PostingView/index.js",["59"],"import React, { useState, useEffect } from 'react';\nimport { apiCalls } from '../../apiCalls';\nimport './PostingView.scss';\nimport backButton from '../../Assets/back-button.png';\nimport { Link } from 'react-router-dom';\nimport Loading from '../Loading';\n\nconst PostingView = ({ match, setUser }) => {\n  const eventId = match.params.id;\n  const [chosenPosting, setChosenPosting] = useState(null);\n  const [chosenJob, setChosenJob] = useState(null);\n  const [signedUpJobName, setSignedUpJobName] = useState('');\n\n  const getDetails = () => {\n    Promise.all([apiCalls.getUser(), apiCalls.getSinglePosting(eventId)]).then(\n      (data) => {\n        if (data[0]) {\n          setUser(data[0]);\n          setChosenPosting(data[1]);\n          const signedUpEvent = data[0].upcomingJobs.find(\n            (job) => job.eventName === data[1].name\n          );\n          if (signedUpEvent) {\n            setSignedUpJobName(signedUpEvent.positionName);\n          }\n        }\n      }\n    );\n  };\n\n  const substractOpenPosition = () => {\n    apiCalls.patchEventPosting(eventId, { jobId: chosenJob.id }).then(() => {\n      postPositionToUser();\n      setSignedUpJobName(chosenJob.name);\n      getDetails();\n    });\n  };\n\n  const postPositionToUser = () => {\n    const newUpcomingJob = {\n      id: `1-${chosenJob.id}`,\n      eventId,\n      eventName: chosenPosting.name,\n      positionName: chosenJob.name,\n      date: chosenPosting.date\n    };\n    apiCalls.postJobPosting(newUpcomingJob).then(() => {\n      setUser((prevInfo) => ({\n        ...prevInfo,\n        upcomingJobs: [...prevInfo.upcomingJobs, newUpcomingJob]\n      }));\n    });\n  };\n\n  useEffect(() => getDetails(), [eventId]);\n\n  if (chosenPosting) {\n    const {\n      date,\n      name,\n      organization,\n      location,\n      description,\n      duration,\n      category,\n      openJobs\n    } = chosenPosting;\n\n    const reformedDate = new Date(date)\n      .toDateString()\n      .split(' ')\n      .slice(1)\n      .join(' ');\n\n    return (\n      <section\n        data-testid='posting-view-element'\n        className='postings-container-single'\n      >\n        <div className='postings-title-wrapper'>\n          <h1 className='postings-title'>Event Details</h1>\n        </div>\n        <div className='posting-info-wrapper'>\n          <div className='posting-left-info-wrapper'>\n            <div className='back-button-wrap'>\n              <Link to='/postings'>\n                <img\n                  src={backButton}\n                  className='back-button-img'\n                  alt='return-home-button'\n                />\n              </Link>\n            </div>\n            <h3 className='event-title'>{name}</h3>\n            <div className='section-titles'>\n              <strong>\n                <p className='posting-info-title'>Description</p>\n              </strong>\n              <hr className='section-line' />\n            </div>\n            <p className='event-description'>{description}</p>\n            <div className='section-titles'>\n              <strong>\n                <p className='posting-info-title'>Open Positions</p>\n              </strong>\n              <hr className='section-line' />\n            </div>\n            <div className='posting-position-cards-wrapper'>\n              {openJobs.map((job) => (\n                <button\n                  onClick={() => setChosenJob(job)}\n                  key={job.id}\n                  className='posting-positions-card'\n                  style={{\n                    backgroundColor:\n                      signedUpJobName === job.name ? '#2ec4b6' : '#initial',\n                    color: signedUpJobName === job.name ? 'white' : '#initial',\n                    borderColor:\n                      signedUpJobName === job.name ? '#2ec4b6' : '#initial'\n                  }}\n                >\n                  <h3 className='event-job-name'>{job.name}</h3>\n                  <p className='event-job-title'>\n                    Open Spots: {job.numberOfSpots}\n                  </p>\n                </button>\n              ))}\n            </div>\n            <div className='submit-button-wrapper'>\n              <button\n                onClick={substractOpenPosition}\n                disabled={signedUpJobName ? true : false}\n                style={{ display: signedUpJobName ? 'none' : 'block' }}\n                className='submit-button'\n              >\n                Sign me up!\n              </button>\n            </div>\n            <div className='sign-up-event-message-wrapper'>\n              <p\n                style={{ display: signedUpJobName ? 'inline-block' : 'none' }}\n                className='sign-up-event-message'\n              >\n                You have already signed up for this event!\n              </p>\n            </div>\n          </div>\n          <div className='posting-right-info-wrapper'>\n            <h3 className='event-title'>{reformedDate}</h3>\n            <div className='posting-organization-wrapper'>\n              <strong>\n                <p className='posting-info-title'>Organization</p>\n              </strong>\n              <p>{organization}</p>\n            </div>\n            <div className='posting-category-wrapper'>\n              <strong>\n                <p className='posting-info-title'>Category</p>\n              </strong>\n              <p>{category}</p>\n            </div>\n            <div className='posting-location-wrapper'>\n              <strong>\n                <p className='posting-info-title'>Location</p>\n              </strong>\n              <p>{location}</p>\n            </div>\n            <div className='posting-duration-wrapper'>\n              <strong>\n                <p className='posting-info-title'>Duration</p>\n              </strong>\n              <p>{duration}</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n  return <Loading />;\n};\n\nexport default PostingView;\n","/Users/cooperterrones/turing/module3/projects/favo/src/Components/PostingCard/index.js",[],"/Users/cooperterrones/turing/module3/projects/favo/src/Components/ProgressRing/index.js",["60"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./ProgressRing.scss\";\nimport { Chart } from \"react-google-charts\";\n\nconst ProgressRing = ({ volunteeredHours, completedJobs }) => {\n  const completedJobDuplicateChecker = completedJobs.reduce(\n    (cleanArrayOfJobs, job) => {\n      if (!cleanArrayOfJobs[job.positionName]) {\n        cleanArrayOfJobs[job.positionName] = job.duration;\n      } else {\n        cleanArrayOfJobs[job.positionName] += job.duration;\n      }\n      return cleanArrayOfJobs;\n    },\n    {}\n  );\n\n  const createJobsDataForChart = Object.entries(completedJobDuplicateChecker);\n\n  let postingsHoursChartData = [\n    [\"Task\", \"Hours per posting\"],\n    ...createJobsDataForChart\n  ];\n\n  return (\n    <section className='donut_single'>\n      <Chart\n        className='progress-ring'\n        chartType='PieChart'\n        loader={<div>Loading Chart</div>}\n        data={postingsHoursChartData}\n        options={{\n          pieHole: 0.7,\n          legend: \"none\",\n          pieSliceText: \"none\"\n        }}\n        rootProps={{ \"data-testid\": \"progress-ring\" }}\n      />\n      <p className='progress-ring-text' id='percentage'>\n        {volunteeredHours} hr\n      </p>\n    </section>\n  );\n};\n\nexport default ProgressRing;\n","/Users/cooperterrones/turing/module3/projects/favo/src/Components/Navigation/index.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":38,"column":11,"nodeType":"67","endLine":38,"endColumn":69},{"ruleId":"68","severity":1,"message":"69","line":29,"column":36,"nodeType":"70","endLine":29,"endColumn":38,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":55,"column":33,"nodeType":"70","endLine":55,"endColumn":42,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":14},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.","ArrayExpression",["80"],"React Hook useEffect has a missing dependency: 'getDetails'. Either include it or remove the dependency array.",["81"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [getCategories]",{"range":"86","text":"87"},"Update the dependencies array to be: [eventId, getDetails]",{"range":"88","text":"89"},[801,803],"[getCategories]",[1660,1669],"[eventId, getDetails]"]